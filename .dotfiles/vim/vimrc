call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'szw/vim-tags'
Plug 'tpope/vim-sleuth'
Plug 'easymotion/vim-easymotion'
Plug 'majutsushi/tagbar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'Valloric/YouCompleteMe', { 'dir': '~/.vim/bundle/YouCompleteMe', 'do': './install.py --clang-completer --omnisharp-completer --tern-completer' }
Plug 'w0ng/vim-hybrid'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ntpeters/vim-better-whitespace'
Plug 'moll/vim-bbye'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'"
Plug 'ervandew/supertab'
Plug 'vim-scripts/bats.vim'
call plug#end()

" Theme
set background=dark
let g:hybrid_custom_term_colors=1
let g:hybrid_reduced_contrast=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme hybrid

" Key bindings
let mapleader=','
inoremap jj <Esc>
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprevious<CR>
nnoremap <C-]> g<C-]>
vmap <C-c> :w !pbcopy<CR><CR>
nnoremap ZQ :qa!<CR>
" vim-bbye
nnoremap <Leader>q :Bdelete<CR>

" Basic Config
set number
set sw=2 ts=2 sts=2 et
set nowrap
set cursorline
set ignorecase
set smartcase
set showmatch
set hidden
set autoread
let g:terminal_scrollback_buffer_size = 2147483647

" for crontab
set backupskip=/tmp/*,/private/tmp/*

" Performance
set lazyredraw

" NerdTree
noremap  <leader>n :NERDTreeToggle<cr>
inoremap <leader>n <esc>:NERDTreeToggle<cr>

" Tagbar
nmap <leader>t :TagbarToggle<CR>

" fzf
let g:fzf_files_options=
  \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'

" airline
let g:airline_theme='bubblegum'
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=1
set encoding=utf-8
set laststatus=2

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" incsearch
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Fugitive
autocmd QuickFixCmdPost *grep* cwindow

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" vim tags
let g:vim_tags_directories = ["."]
