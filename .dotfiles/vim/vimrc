" use python3
let python3_path=$HOME . '/.pyenv/versions/neovim/bin/python'
if filereadable(python3_path)
    let g:python3_host_prog=python3_path
endif

call plug#begin('~/.vim/bundle')
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'szw/vim-tags'
Plug 'tpope/vim-sleuth'
Plug 'easymotion/vim-easymotion'
Plug 'majutsushi/tagbar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'w0ng/vim-hybrid'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ntpeters/vim-better-whitespace'
Plug 'moll/vim-bbye'
Plug 'honza/vim-snippets'"
Plug 'ervandew/supertab'
Plug 'vim-scripts/bats.vim'
Plug 'chazy/cscope_maps'
Plug 'ronakg/quickr-preview.vim'
Plug 'zebult/auto-gtags.vim'

if has('nvim')
  Plug 'Valloric/YouCompleteMe', { 'dir': '~/.vim/bundle/YouCompleteMe', 'do': './install.py --clang-completer --tern-completer' }
  Plug 'SirVer/ultisnips'
endif

call plug#end()

" Theme
set background=dark
let g:hybrid_custom_term_colors=1
let g:hybrid_reduced_contrast=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme hybrid

" Key bindings
let mapleader=','
inoremap jj <Esc>
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprevious<CR>
nnoremap <C-]> g<C-]>
vmap <C-c> :w !pbcopy<CR><CR>
nnoremap ZQ :qa!<CR>
" vim-bbye
nnoremap <Leader>q :Bdelete<CR>
"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

" Basic Config
set number
set sw=2 ts=2 sts=2 et
set nowrap
set cursorline
set ignorecase
set smartcase
set showmatch
set hidden
set autoread
let g:terminal_scrollback_buffer_size = 2147483647

" for crontab
set backupskip=/tmp/*,/private/tmp/*

" Performance
set lazyredraw

" NerdTree
noremap  <leader>n :NERDTreeToggle<cr>
inoremap <leader>n <esc>:NERDTreeToggle<cr>

" Tagbar
nmap <leader>t :TagbarToggle<CR>

" fzf
" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%', '?'),
  \                 <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.<q-args>, 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%', '?'),
  \   <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" python
" pip3 install --user --upgrade neovim
" pip install --user --upgrade neovim
let g:loaded_python_provider = 1
let g:python_host_skip_check=1
let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_skip_check=1
let g:python3_host_prog = '/usr/local/bin/python3'

" airline
let g:airline_theme='bubblegum'
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=1
set encoding=utf-8
set laststatus=2

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'

" incsearch
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

" incsearch-fuzzy
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Fugitive
autocmd QuickFixCmdPost *grep* cwindow

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" vim tags
let g:vim_tags_directories = ["."]
let g:vim_tags_ignore_files = []

" Gtags
let g:Gtags_Auto_Update = 1
nmap <F2> :copen<CR>
nmap <F4> :cclose<CR>
nmap <F5> :Gtags<SPACE>
nmap <F6> :Gtags -f %<CR>
nmap <F7> :GtagsCursor<CR>
nmap <F8> :Gozilla<CR>
nmap <C-j> :cn<CR>
nmap <C-k> :cp<CR>
nmap <C-\><C-]> :GtagsCursor<CR>
